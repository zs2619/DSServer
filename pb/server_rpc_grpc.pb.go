// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: server_rpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcGameDscClient is the client API for RpcGameDsc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcGameDscClient interface {
	CreateDS(ctx context.Context, in *RpcCreateDSReq, opts ...grpc.CallOption) (*RpcCreateDSResp, error)
	RemoveDS(ctx context.Context, in *RpcRemoveDSReq, opts ...grpc.CallOption) (*RpcRemoveDSResp, error)
}

type rpcGameDscClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcGameDscClient(cc grpc.ClientConnInterface) RpcGameDscClient {
	return &rpcGameDscClient{cc}
}

func (c *rpcGameDscClient) CreateDS(ctx context.Context, in *RpcCreateDSReq, opts ...grpc.CallOption) (*RpcCreateDSResp, error) {
	out := new(RpcCreateDSResp)
	err := c.cc.Invoke(ctx, "/pb.RpcGameDsc/CreateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcGameDscClient) RemoveDS(ctx context.Context, in *RpcRemoveDSReq, opts ...grpc.CallOption) (*RpcRemoveDSResp, error) {
	out := new(RpcRemoveDSResp)
	err := c.cc.Invoke(ctx, "/pb.RpcGameDsc/RemoveDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcGameDscServer is the server API for RpcGameDsc service.
// All implementations must embed UnimplementedRpcGameDscServer
// for forward compatibility
type RpcGameDscServer interface {
	CreateDS(context.Context, *RpcCreateDSReq) (*RpcCreateDSResp, error)
	RemoveDS(context.Context, *RpcRemoveDSReq) (*RpcRemoveDSResp, error)
	mustEmbedUnimplementedRpcGameDscServer()
}

// UnimplementedRpcGameDscServer must be embedded to have forward compatible implementations.
type UnimplementedRpcGameDscServer struct {
}

func (UnimplementedRpcGameDscServer) CreateDS(context.Context, *RpcCreateDSReq) (*RpcCreateDSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDS not implemented")
}
func (UnimplementedRpcGameDscServer) RemoveDS(context.Context, *RpcRemoveDSReq) (*RpcRemoveDSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDS not implemented")
}
func (UnimplementedRpcGameDscServer) mustEmbedUnimplementedRpcGameDscServer() {}

// UnsafeRpcGameDscServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcGameDscServer will
// result in compilation errors.
type UnsafeRpcGameDscServer interface {
	mustEmbedUnimplementedRpcGameDscServer()
}

func RegisterRpcGameDscServer(s grpc.ServiceRegistrar, srv RpcGameDscServer) {
	s.RegisterService(&RpcGameDsc_ServiceDesc, srv)
}

func _RpcGameDsc_CreateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCreateDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcGameDscServer).CreateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RpcGameDsc/CreateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcGameDscServer).CreateDS(ctx, req.(*RpcCreateDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcGameDsc_RemoveDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRemoveDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcGameDscServer).RemoveDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RpcGameDsc/RemoveDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcGameDscServer).RemoveDS(ctx, req.(*RpcRemoveDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcGameDsc_ServiceDesc is the grpc.ServiceDesc for RpcGameDsc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcGameDsc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RpcGameDsc",
	HandlerType: (*RpcGameDscServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDS",
			Handler:    _RpcGameDsc_CreateDS_Handler,
		},
		{
			MethodName: "RemoveDS",
			Handler:    _RpcGameDsc_RemoveDS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_rpc.proto",
}

// StreamDscDSAClient is the client API for StreamDscDSA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDscDSAClient interface {
	StreamService(ctx context.Context, opts ...grpc.CallOption) (StreamDscDSA_StreamServiceClient, error)
}

type streamDscDSAClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDscDSAClient(cc grpc.ClientConnInterface) StreamDscDSAClient {
	return &streamDscDSAClient{cc}
}

func (c *streamDscDSAClient) StreamService(ctx context.Context, opts ...grpc.CallOption) (StreamDscDSA_StreamServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDscDSA_ServiceDesc.Streams[0], "/pb.StreamDscDSA/StreamService", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDscDSAStreamServiceClient{stream}
	return x, nil
}

type StreamDscDSA_StreamServiceClient interface {
	Send(*StreamClientEvent) error
	Recv() (*StreamServerEvent, error)
	grpc.ClientStream
}

type streamDscDSAStreamServiceClient struct {
	grpc.ClientStream
}

func (x *streamDscDSAStreamServiceClient) Send(m *StreamClientEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamDscDSAStreamServiceClient) Recv() (*StreamServerEvent, error) {
	m := new(StreamServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDscDSAServer is the server API for StreamDscDSA service.
// All implementations must embed UnimplementedStreamDscDSAServer
// for forward compatibility
type StreamDscDSAServer interface {
	StreamService(StreamDscDSA_StreamServiceServer) error
	mustEmbedUnimplementedStreamDscDSAServer()
}

// UnimplementedStreamDscDSAServer must be embedded to have forward compatible implementations.
type UnimplementedStreamDscDSAServer struct {
}

func (UnimplementedStreamDscDSAServer) StreamService(StreamDscDSA_StreamServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamService not implemented")
}
func (UnimplementedStreamDscDSAServer) mustEmbedUnimplementedStreamDscDSAServer() {}

// UnsafeStreamDscDSAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDscDSAServer will
// result in compilation errors.
type UnsafeStreamDscDSAServer interface {
	mustEmbedUnimplementedStreamDscDSAServer()
}

func RegisterStreamDscDSAServer(s grpc.ServiceRegistrar, srv StreamDscDSAServer) {
	s.RegisterService(&StreamDscDSA_ServiceDesc, srv)
}

func _StreamDscDSA_StreamService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamDscDSAServer).StreamService(&streamDscDSAStreamServiceServer{stream})
}

type StreamDscDSA_StreamServiceServer interface {
	Send(*StreamServerEvent) error
	Recv() (*StreamClientEvent, error)
	grpc.ServerStream
}

type streamDscDSAStreamServiceServer struct {
	grpc.ServerStream
}

func (x *streamDscDSAStreamServiceServer) Send(m *StreamServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamDscDSAStreamServiceServer) Recv() (*StreamClientEvent, error) {
	m := new(StreamClientEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDscDSA_ServiceDesc is the grpc.ServiceDesc for StreamDscDSA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamDscDSA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StreamDscDSA",
	HandlerType: (*StreamDscDSAServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamService",
			Handler:       _StreamDscDSA_StreamService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server_rpc.proto",
}
